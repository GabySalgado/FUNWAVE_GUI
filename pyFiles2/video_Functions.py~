import numpy as np
import ipywidgets as widgets
import matplotlib.pyplot as plt
import os

# import pertaining variables: 
from pyFiles2.PrincipalTab_1 import THL as Lt                   # total horizontal length
from pyFiles2.PrincipalTab_2 import output_text                 # output directory
from pyFiles2.PrincipalTab_2 import plotInt_text                # plot interval (s)
from pyFiles2.PrincipalTab_5 import numOfETA_text,video_load    # number of eta files and video loadbar widget


def ffmpeg_run(postprocessDir):
    os.chdir(postprocessDir) # move to directory where the eta images are located (output directory)
    os.system("ffmpeg -r 12 -y -i surf_%5d.png -s 815x735 surfaceMovie.mp4") # create video with ffmpeg terminal command
    
    
def readETAData(num,numOfETA,postprocessDir,pts):
    
    """Function that reads in the eta_00.. ASCII file and returns
    it in the 2D NumPy array of size [numOfRows,pts]."""

    assert num in range(1,numOfETA+1), "File Index:%d is not in range of station numbers." %(num,)
    if num < 10:
        fileIndex = str(num)
        fileName = postprocessDir+'eta_0000{0:s}'.format(fileIndex)

    elif num <100 and num > 9:
        fileIndex = str(num)
        fileName = postprocessDir+'eta_000{0:s}'.format(fileIndex)

    elif num < 1000 and num>99: 
        fileIndex = str(num)
        fileName = postprocessDir+'eta_00{0:s}'.format(fileIndex)

    else: 
        fileIndex = str(i)
        fileName = postprocessDir+'eta_0{0:s}'.format(fileIndex)

    fin = open(fileName, "r")
    lines = fin.readlines()
    
    numpyFileArray = np.zeros((len(lines),pts))

    for lineIndex,line in enumerate(lines):
        rowDataList = line.strip().split()          # dropping all whitespace (leading & trailing)
        numpyData = np.array(rowDataList).astype('float')
        numpyFileArray[lineIndex,:] = numpyData[:]

    fin.close()
    return numpyFileArray

    
def runVID_function(variable):
    
    """Function that plots the eta files""" 
    
    # move to directory where depth file is located
    postprocessDir = str(output_text.value)
    os.chdir(postprocessDir+'..')
    
    
    depth = (np.loadtxt('depth.txt'))*-1  # Change Depth to (-) under MWL and (+) over MWL. 
    pts  = len(depth.T)                   # num of Colums = number of points 
    
    numOfRows = len(depth)
    numOfETA = int(numOfETA_text.value)
    
    video_load.max = int(numOfETA_text.value)
    plotInt = plotInt_text.value  
    
    
    # data placeholder
    eta = np.zeros((numOfRows,pts,numOfETA))
    freeSurface = np.zeros((numOfRows,numOfETA))
   
    # Plot and save every ETA file:
    for i in range(1, numOfETA+1):
        surf = readETAData(i,numOfETA,postprocessDir,pts)   # Y axis = eta data
        x = np.linspace(0, Lt, pts)                     # X axis = Total Length (m)

        fig  = plt.figure(figsize=(18,4), dpi=600)
        ax = fig.add_subplot(1,1,1)
        plt.plot(x, surf[1,:], 'c-', linewidth = 0.2)
        plt.axis([-1.5,Lt,min(depth[1,:])-.05,5])

        plt.xlabel('Length (%4.2f m)' % (Lt), fontsize = 12, fontweight = 'bold')
        plt.ylabel('Height (m)', fontsize = 12, fontweight = 'bold')
        
         # Water Fill:
        plt.fill_between(x, depth[1,:], surf[1,:],
                         where = surf[1,:] > depth[1,:],
                         facecolor = 'cyan', interpolate =True)

        # Bottom Fill:
        plt.fill_between(x, min(depth[1,:])-.05, depth[1,:], 
                                   where= depth[1,:] > (depth[1,:]-.05),facecolor = '0.35',
                                   hatch = 'X')

        # Time Annotations:
        Time = plt.annotate('Time: %4.2f sec'%(i*plotInt-plotInt), xy=(Lt*.85,3),fontsize = 16,
                                     ha='center', va='center')

        if i < 10:
            fileIndex = '0'+str(i)
            fileName = postprocessDir+'surf_000{0:s}'.format(fileIndex)
            plt.savefig(fileName, ext="png", bbox_inches='tight')
            plt.close()
            
            # video load bar progress description:
            video_load.min = 0 
            video_load.max = numOfETA_text.value
            video_load.value = i
            video_load.description = '%d/%d'%(i,numOfETA_text.value)
            
        elif i < 100:
            fileIndex = str(i)
            fileName = postprocessDir+'surf_000{0:s}'.format(fileIndex)
            plt.savefig(fileName, ext="png", bbox_inches='tight')
            plt.close()
            
            # video load bar progress description:
            video_load.min = 0 
            video_load.max = numOfETA_text.value
            video_load.value = i
            video_load.description = '%d/%d'%(i,numOfETA_text.value)
            
        elif i < 1000: 
            fileIndex = str(i)
            fileName = postprocessDir+'surf_00{0:s}'.format(fileIndex)
            plt.savefig(fileName, ext="png", bbox_inches='tight')
            plt.close()
            
            # video load bar progress description:
            video_load.min = 0 
            video_load.max = numOfETA_text.value
            video_load.value = i
            video_load.description = '%d/%d'%(i,numOfETA_text.value)
            
        else: 
            fileIndex = str(i)
            fileName = postprocessDir+'surf_0{0:s}'.format(fileIndex)
            plt.savefig(fileName,ext="png", bbox_inches='tight')
            plt.close()
            
            # video load bar progress description:
            video_load.min = 0 
            video_load.max = numOfETA_text.value
            video_load.value = i
            video_load.description = '%d/%d'%(i,numOfETA_text.value)       
    ffmpeg_run(postprocessDir)
     
        
        
            
        
